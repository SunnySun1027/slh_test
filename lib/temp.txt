a=(`who am i`);USER=${a[0]};

sed -i .js "s/USER/$USER/" ./run_suite

dlsofts-iMac:run dlsoft$ echo ${a[0]}
dlsoft
dlsofts-iMac:run dlsoft$ USER=${a[0]}

target.frontMostApp().navigationBar().tapWithOptions({tapOffset:{x:0.41, y:0.39}});
target.frontMostApp().mainWindow().scrollViews()[0].buttons()["常青店"].tap();

iPad 2 (9.1) [11EE0D84-64C1-45A3-87AF-ABE773A1496C]
iPad 2 (8.4) [FDFD79F3-4D01-4B92-9143-52BD98F1C316]

本地设置-开单界面，保存后是否显示打印确认窗口-设为0，不显示

#import "/Users/dlsoft/Documents/slh_test/suite.js"

test000All();


ac 不够强壮

onAlert 提示信息 alertMsg=操作失败，[会话已过期,请重新登录!] 

排序出服务端错误

    var titleText1, titles = [],i=0;
    var texts = getStaticTexts(dataView);
    for ( i = 0; i < texts.length; i++) {
        var text = texts[i];
        var t = text.value();
        if (isUndefined(titleText1) && t == firstTitle) { // 等于第一个标题
            titleText1 = text;
        }
        if (isSameRow(titleText1, text)) {
            titles.push(t);
        }else {
            break;
        }
    }
    





function test170275() {
    tapMenu("销售开单", "收款单");
    logDebug("1");
    var keys = { "日期从" : getDay(-30) };
    debugObject(keys);
    var fields = salesCollectionRecordFields(keys);
    query(fields);
    
    logDebug("2");
    var sum1 = 0;
    var sum2 = 0;
    var sum3 = 0;
    var qr = getQR(window, getScrollView(), "序号", 11);
    logDebug("3");
    debugQResult(qr);
    debugElementTree(window);
    var totalPageNo = qr.totalPageNo;
    for (var j = 1; j <= totalPageNo; j++) {
        for (var i = 0; i < qr.curPageTotal; i++) {
            sum1 += Number(qr.data[i]["现金"]);
            sum2 += Number(qr.data[i]["刷卡"]);
            sum3 += Number(qr.data[i]["汇款"]);
        }
        if (j < totalPageNo) {
            scrollNextPage();
            qr = getQR(window, getScrollView(), "序号", 11);
        }
    }
    var ret = isAnd(isEqual(qr.counts["刷卡"], sum1), isEqual(qr.counts["汇款"],
            sum2));
    logDebug("sum1=" + sum1 + "   sum2=" + sum2);
    return ret;
}


多出来的弹窗影响个数，加个忽略功能


170105 回车改隐藏

#import "/Users/dlsoft/Documents/slh_test/suite.js"

test000All();
        

onAlert onAlert alertName=操作提醒 alertMsg=请仔细核对收款方式和金额,确定保存吗? ret=true
onAlert onAlert alertName=补货退货信息 alertMsg=本次开单包括了补货退货的货品，是否继续开单保存 \n 1, k200,范范 均色 均码\n ret=true
onAlert onAlert alertName=提示信息 alertMsg=保存成功，是否打印? ret=false

tapButtonAndAlert i=none alertButtonIndex=取 消 waitUntilAlertMsgChanged=undefined

function tapMenu1(menu_name, failAgainMax) {
    gMenu1 = menu_name;
    var menu = window.tableViews()[0].cells()[menu_name];
    var ok = tap(menu);
    while (failAgainMax > 0 && !ok) {
        delay();
        failAgainMax--;
        menu = window.tableViews()[0].cells()[menu_name];
        ok = tap(menu);
        logDebug("failAgainMax=" + failAgainMax + " ok=" + ok);
    }
    return ok;
}

销数:0 销额:0 退数:5 退额:1000 特殊货品:0 实销数:-5 现金:300 刷卡:0 汇款:0 代收:0 还款:1300 欠款:0 抵扣:0 余款:0 实销额:-1000 
销数:0 销额:0 退数:5 退额:1000 特殊货品:0 实销数:-5 实销额:-1000 现金:300 刷卡:0 汇款:0 代收:0 还款:0 欠款:0 抵扣:0 余款:1300 
收入，支出新增类别删除

更多 所有挂单
sortByTitle valuePre=待删除<= value=主题 false
时间约等于，相差一分认为相等

新增货品 厂商 新增


        if (i < 0) { // 为了防止卡死
            tapAlertButton();
        }
        
颜色尺码 库存 取值

function addProvider(name,mobile,address,price) {
	tapMenu("往来管理","新增厂商+");

	var elements = [new TField("名称",TF,0,name),
	                new TField("手机",TF,1,mobile),
	                new TField("地址",TF,2,address),
	                new TField("适用价格",BTN_SC,0,price) ];
	setTFieldsValue(getScrollView(), elements);
	tapButton(window, SAVE);
	
	if(isIn(alertMsg,"重复" )) {
		tapButton(window, RETURN);
	}
}

function existsProvider(mobile) {
	tapMenu("往来管理","厂商查询");
	var ret = 0; 
	if(mobile) {
		setTextFieldValue(window, new TField("手机",TF,1,mobile));
		tapButton(window, QUERY);
		var view1 = getScrollView();
		var texts = getStaticTexts(view1);
//		ret = isEqualsTexts1ByTitle(texts, mobile, "手机");
	} else {
		logWarn("手机号码必须输入");
	}
	return ret;
}

/**
 * 通用单个条件查询,返回是否存在的结果值
 * @param menu1
 * @param menu2
 * @param queryField
 * @returns {Boolean}
 */
function query1(menu1, menu2, queryField) {
    tapMenu(menu1, menu2);
    var ret = false;
    if (queryField) {
        var i = queryField.index;
        var value = queryField.value;
        setTextFieldValue(window, queryField);
        tapButton(window, QUERY);
        var texts = getStaticTexts(getScrollView());
        ret = isEqualsTexts1(texts, value);
    } else {
        logWarn("查询值必须输入");
    }
    return ret;
}
/**
 * 通用增加功能
 */
function add(menu1, menu2, hasSavePrompt, elements) {
    tapMenu(menu1, menu2);
    setTFieldsValue(getScrollView(), elements);
    tapButton(window, SAVE);
    // 保存提示弹窗
    if (hasSavePrompt) {
        tapPrompt();
    }
    tapButton(window, RETURN);
}

//JinXinhua <79202792 at qq.com> 20150903

function testGoodsAll() {
	run("增加款号只填必填项", "testAddGoods");
}

function testAddGoods() {
	var menu1 = "货品管理";

	var code = getCode();
	if (!code) {
		return false;
	}

	var elements = [ new TField("款号", TF, 0, code),
			new TField("名称", TF, 1, "铅笔裤"),
			new TField("品牌", BTN_SC, 0, "Adidas"),
			new TField("颜色", BTN_MC, 2, [ 0, 1 ]),
			new TField("尺码", BTN_MC, 4, [ 0, 1 ]) ];
	add(menu1, "新增货品+", true, elements);

	var menu2 = "货品查询";
	var queryField = new TField("款号名称", TF, 1, code);
	return query1(menu1, menu2, queryField);
}

function getCode() {
	var code;
	var menu1 = "货品管理";
	var menu2 = "货品查询";
	for (var i = 0; i < 30; i++) {
		var v1 = "k" + getRandomInt(1000);
		var queryField = new TField("款号名称", TF, 1, v1);
		if (!query1(menu1, menu2, queryField)) {
			code = v1;
			break;
		}
	}
	if (!code) {
		logWarn("没能成功随机生成不存在的款号");
	}
	return code;
}


参数param
/*
 * function editSalesBillStaff(o) { editSalesBillField1(o,"店员"); var key = "店员";
 * var v = o[key]; if (isDefined(v)) { var keys = [ key ]; var fields =
 * editSalesBillFields(keys); changeTFieldValue(fields[key], v);
 * setTFieldsValue(window, fields); } }
 */

/**
 * 静态文本下标,in表示下标可以部分匹配
 * @param view1
 * @param i
 * @returns {Number}
 */
function getStaticTextIndexIn(view1, i) {
    var index = -1;
    var texts = getStaticTexts(view1);
    for (var i = 0; i < texts.length; i++) {
        var t = texts[i];
        var v = t.value();
        if (isIn(v, txt1)) {
            index = i;
            break;
        }
    }
    return index;
}
    //var firstTitle = "门店", lastTitle = "备注";
    var firstTitleIndex = 0, lastTitleIndex = 0, titleTotal = 0;
//    var texts = getStaticTexts( getScrollView(-1));
//    debugArray(texts, "texts");
    for (var i = 0; i < texts.length; i++) {
        if (firstTitle == texts[i].value()) {
            firstTitleIndex = i;
        }
        if (lastTitle == texts[i].value()) {
            lastTitleIndex = i;
            break;
        }
    }
    titleTotal = lastTitleIndex - firstTitleIndex + 1;
    logDebug("firstTitleIndex=" + firstTitleIndex + " lastTitleIndex="
            + lastTitleIndex + " titleTotal=" + titleTotal + " texts.length"
            + texts.length);

自动化测试需实现：销售开单－刷卡
新增客户
ltth图片tfq选ffi款

160051  返回不可用
日期2位年

// typeof 返回的是字符串:"number" "String" "boolean" "object" "function"，"undefined"

// 检测是否登录
// 这个方法没有调试成功，主要是alert不会消失，登录后是可以的，还不明白原因
function isLogin() {
    var ret = true;
    var ok = tapMenu1("退出系统"); // 如果前面已选中，点击是无效的
    if (!ok) {
        tapMenu1("货品管理"); //  换个菜单点击
    }
    if (isIn(alertMsg, "先登录")) {
        ret = false;
    }
    return ret;
}
function getIndexOfGlobalParamValue(name, remark) {
    var menu1 = "系统设置";
    var menu2 = "全局设置";
    tapMenu(menu1, menu2);
    var ret = 0;
    var obj = new TField("名称", TF, 0, name);
    setTextFieldValue(window, obj);
    obj = new TField("备注", TF, 1, remark);
    setTextFieldValue(window, obj);
    if (name || remark) {
        window.buttons()[QUERY].tap();
        delay();
        var texts = getStaticTexts(getScrollView()); // 标题重复10次之多
        var qrTitle = getQResultTitle(texts, "数值");
        var titleIndex = qrTitle.index;
        var titleTotal = qrTitle.total;
        ret = getFirstIndexOfTextsByQRTitle(texts, qrTitle);
    } else {
        logWarn("查询值必须输入");
    }
    return ret;
}

function debugGlobalParamPopValue() {
    var name = "";
    var remark = "是否需要颜色尺码";
    var i = getIndexOfGlobalParamValue(name, remark);
    var texts = getStaticTexts(getScrollView());
    tap(texts[i]);
    delay();
    tap(window.scrollViews()[0].buttons()[0]);
    debugElements(getPopView());
}

function clearAlert() {
    alertName = "";
    alertMsg = "";
}
	var expected = {
		"number-in" : "0",
		"number-out" : "5",
		"sum" : "1500",
		"number-return" : "0",
		"sum-return" : "0",
		"special" : "0",
		"number-fact-out" : "5",
		"sum-fact-out" : "1500",
		"cash" : "0",
		"card" : "0",
		"remit" : "0",
		"agency" : "0",
		"repay" : "0",
		"debt" : "1500",
		"deduct" : "0",
		"spare" : "0"
	};
	if (qr.curPageTotal > 0) {
		var data1 = qr.data[0]; // 当天汇总数据只有一条
		var t = qr.titles;
		json = {
			"sequence" : data1[t["序号"]],
			"day" : data1[t["日期"]],
			"shop" : data1[t["门店"]],
			"number-in" : data1[t["进数"]],
			"number-out" : data1[t["销数"]],
			"sum" : data1[t["销额"]],
			"number-return" : data1[t["退数"]],
			"sum-return" : data1[t["退额"]],
			"special" : data1[t["特殊货品"]],
			"number-fact-out" : data1[t["实销数"]],
			"sum-fact-out" : data1[t["实销额"]],
			"cash" : data1[t["现金"]],
			"card" : data1[t["刷卡"]],
			"remit" : data1[t["汇款"]],
			"agency" : data1[t["代收"]],
			"repay" : data1[t["还款"]],
			"debt" : data1[t["欠款"]],
			"deduct" : data1[t["抵扣"]],
			"spare" : data1[t["余款"]]
		};
	} else {
		json = {
			"sequence" : "0",
			"day" : "",
			"shop" : "",
			"number-in" : "0",
			"number-out" : "0",
			"sum" : "0",
			"number-return" : "0",
			"sum-return" : "0",
			"special" : "0",
			"number-fact-out" : "0",
			"sum-fact-out" : "0",
			"cash" : "0",
			"card" : "0",
			"remit" : "0",
			"agency" : "0",
			"repay" : "0",
			"debt" : "0",
			"deduct" : "0",
			"spare" : "0"
		};
	}
function getQResult(pageInfoView, dataView, firstTitle) {
	if (isUndefined(pageInfoView)) {
		pageInfoView = window;
	}
	if (isUndefined(dataView)) {
		dataView = getScrollView();
	}
	if (isUndefined(firstTitle)) {
		firstTitle = TITLE_SEQ;
	}

	var regTotal = /共\s*(\d+)条/;
	var total;
	var curPageNo;
	var totalPageNo;
	var texts = getStaticTexts(pageInfoView);
	for (var i = 0; i < texts.length; i++) {
		var v = texts[i].value();
		if (regTotal.test(v)) {
			var a1 = regTotal.exec(v);
			total = a1[1];
			var v1 = texts[i + 1].value(); // 页码信息就在下一个
			var a2 = v1.split("/");
			curPageNo = a2[0];
			totalPageNo = a2[1];
			break;
		}
	}
	var curPageTotal;
	if (curPageNo == totalPageNo) { // 最后页
		curPageTotal = total - (totalPageNo - 1) * PAGE_MAX_TOTAL;
	} else {
		curPageTotal = PAGE_MAX_TOTAL;
	}

	texts = getStaticTexts(dataView);
	var qrTitle = getQResultTitle(texts, firstTitle);
	var titleIndex = qrTitle.index;
	var titleTotal = qrTitle.total;
	var titles = new Array(titleTotal);
	for (var i = 0; i < titleTotal; i++) {
		var key = texts[titleIndex + i].value();
		titles[key] = i;
	}

	var counts;
	var data;
	if (curPageTotal > 0) {
		data = new Array(curPageTotal);
		for (var i = 0; i <= curPageTotal; i++) {
			var data1 = new Array(titleTotal);
			for (var j = 0; j < titleTotal; j++) {
				var index = titleIndex + (i + 1) * titleTotal + j;
				if (index < texts.length) {
					data1[j] = texts[index].value();
				}
			}
			if (i < curPageTotal) {
				data[i] = data1;
			} else {
				counts = data1;
			}
		}
	}

	var qResult = new QResult(titles, data, total, curPageTotal, curPageNo,
			totalPageNo, titleIndex, counts);
	return qResult;
}

销售开单同时订货
是否需要颜色尺码   1，默认均色均码，操作更简单
开单模式 1，现金＋刷卡＋汇款

1.新增开单，无颜色尺码 1500，k526,300*5


target.frontMostApp().statusBar().tapWithOptions({tapOffset:{x:0.80, y:0.52}});
target.frontMostApp().mainWindow().buttons()["开  单+"].tap();

target.frontMostApp().mainWindow().textFields()[16].textFields()[0].tap();
target.frontMostApp().keyboard().typeString("K");
target.frontMostApp().mainWindow().tableViews()[4].tapWithOptions({tapOffset:{x:0.20, y:0.07}});



function editCustomerFields(keys, show) {
	return getTFields("editCustomerField", keys, show);
}

function editCustomerField(key, show) {
	var l = getTableViews().length;
	var f;
	switch (key) {
	case "name":
		f = new TField("名称", TF, 1, "a");
		break;
	case "area":
		f = new TField("区域", BTN_AREA, 0, "辽宁",0,"中国,东北");
		if (show) {
			f.type = TF;
			f.index = 2;
		}
		break;
	case "shop":
		f = new TField("门店", BTN_SC, 1, "常青店");
		if (show) {
			f.type = TF;
			f.index = 3;
		}
		break;
	case "birthday":
		f = new TField("生日", TF_DT, 4, "1980-09-10");
		break;
	case "staff":
		f = new TField("店员", TF_AC, 5, "000",l-1,0);
		if (show) {
			f.value = "000,管理员";
		}
		break;
	case "super":
		f = new TField("上级客户", TF_AC, 6, "b", 3, 0);
		if (show) {
			f.value = "Yvb";
		}
		break;
	case "type":
		f = new TField("客户类别", BTN_SC, 2, "零批客户");
		if (show) {
			f.type = TF;
			f.index = 7;
		}
		break;
	case "return":
		f = new TField("允许退货", BTN_SC, 4, "是");
		if (show) {
			f.type = TF;
			f.index = 9;
		}
		break;
	case "price":
		f = new TField("适用价格", BTN_SC, 5, "零批价");
		if (show) {
			f.type = TF;
			f.index = 11;
		}
		break;
	case "mobile":
		f = new TField("手机", TF, 12, "123456789");
		break;
	case "weixin":
		f = new TField("微信", TF, 13, "x123456");
		break;
	case "fax":
		f = new TField("传真号", TF, 14, "55555");
		break;
	case "address":
		f = new TField("地址", TF, 15, "地址");
		break;
	case "remarks":
		f = new TField("备注", TF, 16, "123");
		break;
	case "discount":
		f = new TField("拿货折扣", TF, 17, "0.9");
		break;
	case "credit":
		f = new TField("信用额度", TF, 18, "10000");
		break;
	case "alarm":
		f = new TField("欠款报警", TF, 19, "5000");
		break;
	default:
		logWarn("未知key＝" + key);
	}
	return f;
}

function editCustomerBranchFields(keys, show) {
	return getTFields("editCustomerBranchField", keys, show);
}

function editCustomerBranchField(key, show) {
	var f;
	switch (key) {
	case "name":
		f = new TField("名称", TF, 0, "a");
		break;
	case "mobile":
		f = new TField("电话", TF, 1, "123456789");
		break;
	case "weixin":
		f = new TField("微信", TF, 2, "qwe123");
		break;
	case "address":
		f = new TField("地址", TF, 3, "地址");
		break;
	case "remarks":
		f = new TField("备注", TF, 4, "备注");
		break;
	default:
		logWarn("未知key＝" + key);
	}
	return f;
}

function customerBranchFields(keys, show) {
	return getTFields("customerBranchField", keys, show);
}

function customerBranchField(key, show) {
	var f;
	switch (key) {
	case "name":
		f = new TField("名称", TF, 0, "a");
		break;
	case "mobile":
		f = new TField("手机", TF, 1, "123456789");
		break;
	case "stop":
		f = new TField("是否停用", TF_SC, 2, "否");
		break;
	default:
		logWarn("未知key＝" + key);
	}
	return f;
}









新增供应商，操作人 000
区域选择

logInfo("timeout="+target.timeout()); //默认超时是5秒

// 设置文本框-自动完成值，AC=Auto Complete
function setTextFieldACValue(view1, f) {
	// target.pushTimeout(15);
	// logInfo("timeout="+target.timeout());
	var i = f.index;
	var value = f.value;
	var tf = view1.textFields()[i].textFields()[0];
	tap(tf);
	var kb = app.keyboard();
	// kb.setInterKeyDelay(0.2);
	kb.typeString(value);
	// tf.setValue(value);
	delay();
	// target.popTimeout();

	var tableViewIndex = f.p1;
	var cellIndex = f.p2;
	if (tableViewIndex < 0) {
		var tableViews = getTableViews();
		for (var iTV = tableViews.length - 1; iTV > 0; iTV--) {
			var cells = tableViews[iTV].cells();
			for (var j = 0; j < cells.length; j++) {
				var cell = cells[j];
				if (isEqual(cellIndex, cell.name())) {
					tableViewIndex = iTV;
					cellIndex = j;
					break;
				}
			}
		}
	}
	logInfo("tableViewIndex=" + tableViewIndex + " cellIndex=" + cellIndex);
	logInfo("getTableViewLastIndex=" + getTableViewLastIndex());

	// debugElements(window);
	// delay(10);
	// debugElementTree(window);
	var cond = "window.tableViews()[" + tableViewIndex + "].cells().length>0"

	// var cells = window.tableViews()[tableViewIndex].cells();
	// waitUntil(cond);
	tap(window.tableViews()[tableViewIndex].cells()[cellIndex]);
}

debugElementTree(app.keyboard());
UIAButton: name:Return rect:{{866, 511}, {158, 79}}
UIAButton: name:shift rect:{{0, 597}, {91, 79}}
UIAKey: name:, rect:{{725, 597}, {90, 79}}
UIAButton: name:shift rect:{{905, 597}, {119, 79}}
UIAKey: name:more, numbers rect:{{0, 683}, {90, 79}}   .?123
UIAButton: name:Next keyboard value:Emoji rect:{{90, 683}, {91, 79}} 笑脸，表情
UIAButton: name:Dictate rect:{{181, 683}, {91, 79}}
UIAKey: name:space rect:{{181, 683}, {634, 79}}
UIAButton: name:Hide keyboard rect:{{933, 683}, {91, 79}}

UIAButton: name:隐藏键盘 rect:{{933, 683}, {91, 79}}

var kb = app.keyboard();
tap(kb.buttons()["隐藏键盘"]);

// 返回texts标题＝title的等于value的下标
function getIndexEqualsTexts1ByTitle(texts, value, title) {
	if (debug) {
		logDebug("value=" + value + " title=" + title);
		debugArray(texts);
	}

	var qrTitle = getQResultTitle(texts, title);
	var titleIndex = qrTitle.index;
	var titleTotal = qrTitle.total;

	var ret = -1;
	for (var i = titleIndex + titleTotal; i < texts.length; i++) {
		if (value === texts[i].value()) {
			ret = i;
			break;
		}
	}

	return ret;
}
// texts元素中包含value的个数
function getCountInTexts1ByTitle(texts, value, title) {
	var qrTitle = getQResultTitle(texts, title);
	var titleIndex = qrTitle.index;
	var titleTotal = qrTitle.total;
	var ret = 0;
	for (var i = titleIndex + titleTotal; i < texts.length; i++) {
		if (isIn(texts[i].value(), value)) {
			ret++;
		}
	}
	logDebug("value=" + value + " count in query result=", ret);
	return ret;
}
// 如果 texts 标题＝title的任一值等于a ，返回真
function isEqualsTexts1ByTitle(texts, value, title) {
	return getIndexEqualsTexts1ByTitle(texts, value, title) != -1;
}

// 设置文本框-自动完成值，AC=Auto Complete
function setTextFieldACValue(view1, e1) {
//	view1.scrollUp();
	var i = e1.index;
	var value = e1.value;
	var tf = view1.textFields()[i].textFields()[0];
	tap(tf);
//	app.keyboard().typeString(value);
//	var vKeyboard = target.frontMostApp().keyboard();
//	vKeyboard.setInterKeyDelay(0.1);
	app.keyboard().typeString(value);
//	UIATarget.localTarget().frontMostApp().keyboard().typeString("a");
//	delay(10);
//	tf.scrollToVisible();
//	delay();
//	logDebug("tf.isValid="+tf.isValid());
//	tf.setValue(value);
//	tap(view1.textFields()[i].buttons()["Clear text"]);
//	tf.touchAndHold(1);
//	tf.setValue(value);
//	delay(20);
//	delay();
//	tf.setValue("");
//	delay();
//	tf.setValue(value+value);
//	delay();
//	tap(tf);
	var tableViewIndex = e1.p1;
	var cellIndex = e1.p2;
//	target.pushTimeout(10);
//	setTextFieldValue(view1, e1);
//	delay(10);
//	debugElements(window);
//	target.popTimeout();
	tap(window.tableViews()[tableViewIndex].cells()[cellIndex]);
	/*
	var tableViews = window.tableViews();
	for(var i=1;i<tableViews.length;i++) {
		var cells = tableViews[i].cells();
		for(var j=0;j<cells.length;j++) {
			var cell = cells[j];
			if(value == cell.value()) {
				cell.tap();
				break;
			}
		}
	}*/
}

function debugElemnetsAtView() {
	var view1 = window.scrollViews()[0];
	debugElemnetsAt(view1);
}

//对象类型判定
function isUIAElementNil(obj) {
	return isType(obj, "[object UIAElementNil]");
}
function isUIAButton(obj) {
	return isType(obj, "[object UIAButton]");
}
function isUIAStaticText(obj) {
	return isType(obj, "[object UIAStaticText]");
}
function isUIAScrollView(obj) {
	return isType(obj, "[object UIAScrollView]");
}
function isType(obj, typeName) {
	return Object.prototype.toString.call(obj) === typeName;
}


/*
for (var i = 0; i < texts.length; i++) {
	if (title1 == texts[i].value()) {
		title1IndexPre = title1Index;
		title1Index = i;
	}
	if (title == texts[i].value()) {
		titleIndexPre = titleIndex;
		titleIndex = i;
		// 已经搜索到标题的尽头
		var title1IndexNext = 2 * title1Index - title1IndexPre;
		if (title1IndexPre > 0
				&& titleIndexPre > 0
				&& title1Index - title1IndexPre == titleIndex
						- titleIndexPre && title1IndexNext < texts.length
				&& title1 != texts[title1IndexNext].value()) {
			break;
		}
	}
}
*/


function getDTQueryResultTitle(texts, title) {
	// 第一个标题是固定的
	var title1 = "序号";
	var title1IndexPre = 0;
	var title1Index = 0;
	// 找标题下标，标题结构很奇怪，有的第一遍是个全集，后面两遍是显示标题，也有的显示10遍同样的,还有中间穿插的
	var titleIndexPre = 0;
	var titleIndex = 0;

	var i = 0;
	while (i < texts.length) {
		// 先找序号的下标
		var index1 = getIndexFromStartIndex(texts, title1, i);
		if (index1 != -1) {
			i = index1;
			title1IndexPre = title1Index;
			title1Index = i;
			// 从index1位置继续开始找title
			var index = getIndexFromStartIndex(texts, title, index1);
			if (index != -1) {
				i = index;
				titleIndexPre = titleIndex;
				titleIndex = i;
			} else {
				break;
			}
		} else {
			break;
		}
	}
	if (titleIndex < title1Index) {
		logWarn(title+ "下标小于序号下标");
	}
	if (titleIndex - titleIndexPre != title1Index - title1IndexPre) {
		logWarn("标题总个数有误 titleIndex-titleIndexPre="+
				(titleIndex - titleIndexPre)+ "title1Index-title1IndexPre="+
				(title1Index - title1IndexPre));
	}

	var titleTotal = titleIndex - titleIndexPre; // 显示标题总个数
	var qrTitle = new DTQueryResultTitle(title, titleIndex, titleTotal);

	return qrTitle;
}

function getIndexFromStartIndex(texts, title, startIndex) {
	var ret = -1;
	for (var i = startIndex; i < texts.length; i++) {
		if (title === texts[i].value()) {
			ret = i;
			break;
		}
	}
	return ret;
}

/*
UIAWindow: rect:{{0, 0}, {1024, 768}}
	UIANavigationBar: name:商陆花 6.58 rect:{{0, 20}, {150, 44}}
		UIAStaticText: name:商陆花 6.58 value:商陆花 6.58 rect:{{8, 22}, {134, 40}}
	UIATableView: value:rows 1 to 14 of 14 rect:{{0, 0}, {150, 768}}
		UIATableCell: name:货品管理 value: rect:{{0, 64}, {150, 44}}
			UIAStaticText: name:货品管理 value:货品管理 rect:{{45, 69}, {100, 30}}
		。。。
		UIAImage: rect:{{5, 680}, {40, 40}} --刷新按钮
		UIAStaticText: value: rect:{{10, 680}, {140, 20}}
		UIAStaticText: name:刷新于: 09-09 09:50:55 value:刷新于: 09-09 09:50:55 rect:{{40, 690}, {140, 15}}
		UIAStaticText: name:货品 0   客户 0 value:货品 0   客户 0 rect:{{40, 705}, {140, 15}}
	UIAToolbar: rect:{{0, 768}, {150, 44}}
		UIAImage: rect:{{0, 767}, {150, 1}}
		UIAImage: rect:{{0, 768}, {150, 44}}
	UIAActivityIndicator: name:In progress value:1 rect:{{494, 366}, {37, 37}}
	UIAStaticText: rect:{{512, 403}, {0, 0}}
	UIANavigationBar: name:000,管理员,总经理 [常青店(test)36新] [jxh] rect:{{151, 20}, {873, 44}}
	UIAButton: name:客户查询 rect:{{153, 70}, {80, 30}}
	...
	UIAButton: name:新增物流商 rect:{{865, 70}, {80, 30}}
	UIATextField: value: rect:{{153, 110}, {170, 34}} --查询输入框
	。。。
	UIAScrollView: rect:{{153, 185}, {840, 600}}  --查询结果
	UIAImage: name:arrow_1.png rect:{{993, 227}, {15, 15}}
	UIAStaticText: name:黄色代表已停用 value:黄色代表已停用 rect:{{155, 725}, {730, 22}}
	UIAStaticText: name:共 1条 value:共 1条 rect:{{875, 725}, {80, 22}}
	UIAStaticText: name:1/1 value:1/1 rect:{{955, 725}, {220, 22}}
	UIAStaticText: name:每日23:00-23:30系统维护期间，请错开时间登录  V6.5895 value:每日23:00-23:30系统维护期间，请错开时间登录  V6.5895 rect:{{163, 745}, {400, 30}}
	UIAStaticText: name:客服 400-680-5685转2    编号 21154483  115.231. value:客服 400-680-5685转2    编号 21154483  115.231. rect:{{683, 745}, {350, 30}}
	UIAToolbar: rect:{{151, 768}, {873, 44}}
*/

/* 
 * nmh刷usr新
 *target.frontMostApp().mainWindow().tableViews()[0].staticTexts()[1].tapWithOptions({tapOffset:{x:0.43, y:0.93}});

 * 
*/

//等待直至文本数组长度超textsMaxLen，最多maxTimes次，每次1秒
function wait(textsMaxLen, maxTimes) {
	for (var i = 0; i < maxTimes; i++) {
		var texts = window.staticTexts();
		logDebug("texts.length=" + texts.length);
		if (texts.length > textsMaxLen) {
			break;
		} else {
			target.delay(1);
		}
	}
}

function logDebug() {
	if (debug) {
		var msg = Array.prototype.join.call(arguments, ' ');
		UIALogger.logDebug(msg);
	}
}

// ok=undefined

function testRefresh() {
//	debugArray(window.tableViews()[0].images());
//	window.tableViews()[0].images()[0].tap();
//	target.delay(10);

	//window.tableViews()[0].logElementTree();
	window.tableViews()[0].tapWithOptions({tapOffset:{x:0.17, y:0.92}});
	//myDelay();
	var cond="isIn(window.tableViews()[0].staticTexts()[1].value(),'刷新于')";
	waitUntil(cond);
	logInfo(window.tableViews()[0].staticTexts()[1].value());
	logInfo(isIn(window.tableViews()[0].staticTexts()[1].value(),'刷新于'));
	return true;
}

	/*
	var qFields = queryCustomerFields("customer");
	var qf = qFields[0];
	qf.value = "xg"; // 修改 客户1
	var texts = query(qFields);
	var i = getFirstIndexOfTextsByTitle(texts, "序号");
	tap(texts[i]);// 进入修改页面
	*/
客户签名 UIAScrollView: rect:{{128, 64}, {760, 1000}}


/**
 * 获取查询结果
 * @param pageInfoView 默认window
 * @param dataView 默认第一个滚动页
 * @param firstTitle 默认序号
 * @returns {QResult}
 */
function getQResult(pageInfoView, dataView, firstTitle, titleTotal) {
    if (isUndefined(pageInfoView)) {
        pageInfoView = window;
    }
    if (isUndefined(dataView)) {
        dataView = getScrollView();
    }
    if (isUndefined(firstTitle)) {
        firstTitle = TITLE_SEQ;
    }

    var regTotal = /共\s*(\d+)条/;
    var oPage = getPageInfo(pageInfoView, regTotal);
    var total = oPage["total"], curPageTotal = oPage["curPageTotal"], curPageNo = oPage["curPageNo"], totalPageNo = oPage["totalPageNo"];

    texts = getStaticTexts(dataView);
    var qrTitle = getQResultTitle(texts, firstTitle, titleTotal);
    var titleIndex = qrTitle.index;
    var titleTotal = qrTitle.total;
    var titles = [];
    var afterChoose = false, xChoose;
    for (var i = 0; i < titleTotal; i++) {
        var j = i;
        if (afterChoose) {
            j = i - 1;
        }
        var text = texts[titleIndex + i];
        var t = text.value();
        if (t == "选择") {
            afterChoose = true;
            xChoose = text.rect().origin.x;
        } else {
            titles[j] = t;
        }
    }
    if (afterChoose) {
        titleIndex = titleIndex + 1;
        titleTotal = titles.length;
    }

    logDebug("xChoose=" + xChoose);

    var hasError = false;
    var counts = {};
    var data = new Array(curPageTotal);
    if (curPageTotal > 0) {
        for (var i = 0; i <= curPageTotal; i++) {
            var data1 = {};
            for (var j = 0; j < titleTotal; j++) {
                var t = titles[j];
                var index = titleIndex + (i + 1) * titleTotal + j;
                if (index < texts.length) {
                    var text = texts[index];
                    var xText = text.rect().origin.x;
                    if (isDefined(xChoose) && isAqualNum(xChoose, xText)) {
                        logDebug(t + ",xText=" + xText); // 选择列跳过
                    } else {
                        data1[t] = texts[index].value();
                    }

                } else {
                    hasError = true;
                }
            }
            if (i < curPageTotal) {
                data[i] = data1;
            } else {
                counts = data1;
            }
        }
    }

    var qResult = new QResult(titles, data, total, curPageTotal, curPageNo,
            totalPageNo, counts, hasError);// titleIndex,
    return qResult;
}

function getQRDet(view, o) {
    if (isUndefined(view)) {
        view = getScrollView(-1);
    }
    var titles = {};
    if (isDefined(o) && o.hasOwnProperty("标题")) {
        titles = o["标题"];
    } else {
        // 尺码表头模式，取值验证默认使用第一个尺码组来定标题
        titles = getSalesBillDetTfObject();
    }

    var tfNum = titles["明细输入框个数"]
    var line = getStaticTexts(view);// 获取明细界面静态文本数组，一行只有一个
    var texts = getTextFields(view);
    var data = [];
    for (var j = 0; j < line.length; j++) {
        // 根据货品栏判断行是否取值 有地方使用了这个验证或判断行数，不好修改 161220
        if (texts[tfNum * j].value() != "") {
            var data1 = {};
            for (var i = 0; i < tfNum; i++) {
                for ( var t in titles) {
                    if (titles[t] == i) {
                        var index = tfNum * j + i;
                        var v = texts[index].value();
                        data1[t] = v;
                        break;
                    }
                }
            }
            data.push(data1);
        }
    }
    var total = data.length;
    var qResult = new QResult(titles, data, total);
    return qResult;
}